import { useState, useCallback } from 'react';
import { useDropzone } from 'react-dropzone';
import { v4 as uuidv4 } from 'uuid';
import toast from 'react-hot-toast';
import { API_ENDPOINTS } from '../../config/api';
import styles from './DocumentUploader.module.css';

const DocumentUploader = ({ caseId, onUploadSuccess, onTimelineRefresh }) => {
  const [files, setFiles] = useState([]);
  const [currentDocType, setCurrentDocType] = useState('court');
  const [isUploading, setIsUploading] = useState(false);

  const onDrop = useCallback(
    (acceptedFiles, rejectedFiles) => {
      if (rejectedFiles.length > 0) {
        rejectedFiles.forEach(({ file, errors }) => {
          errors.forEach((error) => {
            if (error.code === 'file-too-large') {
              toast.error(`File "${file.name}" qu√° l·ªõn (t·ªëi ƒëa 50MB)`);
            } else if (error.code === 'file-invalid-type') {
              toast.error(`File "${file.name}" kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£`);
            } else {
              toast.error(`L·ªói file "${file.name}": ${error.message}`);
            }
          });
        });
      }

      if (acceptedFiles.length > 0) {
        const newFiles = acceptedFiles.map((file) => ({
          id: uuidv4(),
          fileObject: file,
          docType: currentDocType,
          status: 'waiting',
          message: 'S·∫µn s√†ng',
        }));
        setFiles((prev) => [...prev, ...newFiles]);
        toast.success(`${newFiles.length} file ƒë√£ ƒë∆∞·ª£c th√™m v√†o danh s√°ch!`);
      }
    },
    [currentDocType],
  );

  const { getRootProps, getInputProps, isDragActive } = useDropzone({
    onDrop,
    maxSize: 50 * 1024 * 1024,
    accept: {
      'image/*': ['.jpeg', '.jpg', '.png', '.gif', '.webp', '.bmp'],
      'application/pdf': ['.pdf'],
      'application/msword': ['.doc'],
      'application/vnd.openxmlformats-officedocument.wordprocessingml.document': ['.docx'],
      'application/vnd.ms-excel': ['.xls'],
      'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet': ['.xlsx'],
      'application/vnd.ms-powerpoint': ['.ppt'],
      'application/vnd.openxmlformats-officedocument.presentationml.presentation': ['.pptx'],
      'text/plain': ['.txt'],
      'text/csv': ['.csv'],
      'video/*': ['.mp4', '.avi', '.mov', '.wmv', '.webm'],
      'audio/*': ['.mp3', '.wav', '.ogg'],
      'application/zip': ['.zip'],
      'application/x-rar-compressed': ['.rar'],
      'application/x-7z-compressed': ['.7z'],
    },
  });

  const getTypeName = (type) => {
    const types = {
      enforcement: 'Thi h√†nh √°n',
      court: 'T√≤a √°n',
      notification: 'B√°n n·ª£',
      proactive: 'Ch·ªß ƒë·ªông XLTS',
      collateral: 'T√†i s·∫£n ƒë·∫£m b·∫£o',
      processed_collateral: 'TS ƒë√£ x·ª≠ l√Ω',
      other: 'T√†i li·ªáu kh√°c',
    };
    return types[type] || 'Kh√¥ng x√°c ƒë·ªãnh';
  };

  const handleUploadAll = async () => {
    const token = localStorage.getItem('token');
    if (!token) {
      toast.error('Kh√¥ng t√¨m th·∫•y token. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.');
      return;
    }

    setIsUploading(true);
    toast.loading('ƒêang t·∫£i l√™n c√°c file...', { id: 'upload-all' });

    const filesToUpload = files.filter((f) => f.status === 'waiting' || f.status === 'error');

    const uploadPromises = filesToUpload.map((file) => {
      const formData = new FormData();

      const fileBlob = new File([file.fileObject], file.fileObject.name, {
        type: file.fileObject.type,
        lastModified: file.fileObject.lastModified,
      });

      formData.append('documentFile', fileBlob);
      formData.append('document_type', file.docType);

      return fetch(API_ENDPOINTS.CASES.DOCUMENTS(caseId), {
        method: 'POST',
        headers: { Authorization: `Bearer ${token}` },
        body: formData,
      })
        .then(async (res) => {
          const data = await res.json();
          if (!res.ok) {
            throw new Error(data.message || 'Upload th·∫•t b·∫°i');
          }
          setFiles((prev) =>
            prev.map((f) =>
              f.id === file.id ? { ...f, status: 'success', message: 'Th√†nh c√¥ng' } : f,
            ),
          );
          return data;
        })
        .catch((err) => {
          let errorMessage = 'Upload th·∫•t b·∫°i';

          if (err.message.includes('File qu√° l·ªõn')) {
            errorMessage = 'File qu√° l·ªõn (t·ªëi ƒëa 50MB)';
          } else if (err.message.includes('Lo·∫°i file kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£')) {
            errorMessage = 'Lo·∫°i file kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£';
          } else if (err.message.includes('Kh√¥ng ƒë·ªß dung l∆∞·ª£ng')) {
            errorMessage = 'Kh√¥ng ƒë·ªß dung l∆∞·ª£ng l∆∞u tr·ªØ';
          }

          setFiles((prev) =>
            prev.map((f) =>
              f.id === file.id ? { ...f, status: 'error', message: errorMessage } : f,
            ),
          );
          throw err;
        });
    });

    await Promise.all(uploadPromises);
    setIsUploading(false);
    toast.dismiss('upload-all');

    // Emit global event to refresh timeline after file uploads
    window.dispatchEvent(
      new CustomEvent('case-file-uploaded', {
        detail: {
          caseId,
          operation: 'upload',
          fileCount: filesToUpload.length,
        },
      }),
    );

    if (onUploadSuccess) {
      onUploadSuccess();
    }

    if (onTimelineRefresh) {
      onTimelineRefresh();
    }

    setFiles((prev) => prev.filter((f) => f.status !== 'success'));
    toast.success('Ho√†n t·∫•t qu√° tr√¨nh upload!');
  };

  const removeFile = (fileId) => setFiles(files.filter((f) => f.id !== fileId));
  const hasFilesToUpload = files.some((f) => f.status === 'waiting' || f.status === 'error');

  return (
    <div className={styles.uploaderContainer}>
      <div className={styles.formGroup}>
        <label htmlFor="doc-type">1. Ch·ªçn lo·∫°i t√†i li·ªáu</label>
        <select
          id="doc-type"
          className={styles.formControl}
          value={currentDocType}
          onChange={(e) => setCurrentDocType(e.target.value)}
        >
          <option value="court">T√†i li·ªáu T√≤a √°n</option>
          <option value="enforcement">T√†i li·ªáu Thi h√†nh √°n</option>
          <option value="notification">T√†i li·ªáu B√°n n·ª£</option>
          <option value="proactive">T√†i li·ªáu Ch·ªß ƒë·ªông x·ª≠ l√Ω t√†i s·∫£n</option>
          <option value="collateral">T√†i s·∫£n ƒë·∫£m b·∫£o (·∫¢nh QR)</option>
          <option value="processed_collateral">T√†i li·ªáu t√†i s·∫£n ƒë√£ x·ª≠ l√Ω</option>
          <option value="other">T√†i li·ªáu kh√°c</option>
        </select>
      </div>

      <div className={styles.formGroup}>
        <label>2. T·∫£i l√™n file cho lo·∫°i t√†i li·ªáu tr√™n</label>
        <div
          {...getRootProps({
            className: `${styles.dropzone} ${isDragActive ? styles.dragActive : ''}`,
          })}
        >
          <input {...getInputProps()} />
          <p>K√©o th·∫£ ho·∫∑c nh·∫•n ƒë·ªÉ ch·ªçn file</p>
        </div>
      </div>

      {files.length > 0 && (
        <div className={styles.fileList}>
          <div className={styles.fileListHeader}>
            <h4>Danh s√°ch file ch·ªù upload ({files.length})</h4>
            <button
              onClick={handleUploadAll}
              disabled={isUploading || !hasFilesToUpload}
              className={styles.uploadBTN}
            >
              {isUploading ? 'ƒêang x·ª≠ l√Ω...' : 'T·∫£i l√™n t·∫•t c·∫£'}
            </button>
          </div>
          <ul>
            {files.map((file) => (
              <li key={file.id} className={`${styles.fileQueueItem} ${styles[file.status]}`}>
                <div className={styles.fileInfo}>
                  <span className={styles.fileTypeBadge}>{getTypeName(file.docType)}</span>
                  <span className={styles.fileName}>{file.fileObject.name}</span>
                  <span className={styles.fileSize}>
                    ({Math.round(file.fileObject.size / 1024)} KB)
                  </span>
                </div>
                <div className={styles.fileStatus}>
                  <span className={styles.statusText}>{file.message}</span>
                  <button onClick={() => removeFile(file.id)} className={styles.removeDoc}>
                    üóô
                  </button>
                </div>
              </li>
            ))}
          </ul>
        </div>
      )}
    </div>
  );
};

export default DocumentUploader;
