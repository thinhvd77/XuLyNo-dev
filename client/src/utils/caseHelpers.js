// Helper function ƒë·ªÉ chuy·ªÉn ƒë·ªïi status code th√†nh t√™n hi·ªÉn th·ªã
export const getStatusDisplayName = (status) => {
  const statusMap = {
    beingFollowedUp: 'ƒêang ƒë√¥n ƒë·ªëc',
    beingSued: 'ƒêang kh·ªüi ki·ªán',
    awaitingJudgmentEffect: 'Ch·ªù hi·ªáu l·ª±c √°n',
    beingExecuted: 'ƒêang thi h√†nh √°n',
    proactivelySettled: 'Ch·ªß ƒë·ªông XLTS',
    debtSold: 'B√°n n·ª£',
    amcHired: 'Thu√™ AMC XLN',
  };
  return statusMap[status] || status;
};

// Helper function ƒë·ªÉ t·∫°o message c·∫≠p nh·∫≠t tr·∫°ng th√°i cho timeline
export const getStatusUpdateMessage = (oldStatus, newStatus, userFullname) => {
  const oldStatusName = getStatusDisplayName(oldStatus);
  const newStatusName = getStatusDisplayName(newStatus);
  return `${userFullname} ƒë√£ c·∫≠p nh·∫≠t tr·∫°ng th√°i t·ª´ "${oldStatusName}" th√†nh "${newStatusName}"`;
};

// Helper function ƒë·ªÉ l·∫•y icon cho file
export const getFileIcon = (mimeType, fileName) => {
  if (mimeType.startsWith('image/')) {
    return 'üñºÔ∏è';
  } else if (mimeType.includes('pdf')) {
    return 'üìÑ';
  } else if (
    mimeType.includes('application/msword') ||
    mimeType.includes('application/vnd.openxmlformats-officedocument.wordprocessingml.document') ||
    fileName.endsWith('.doc') ||
    fileName.endsWith('.docx')
  ) {
    return 'üìù';
  } else if (
    mimeType.includes('application/vnd.ms-excel') ||
    mimeType.includes('application/vnd.openxmlformats-officedocument.spreadsheetml.sheet') ||
    fileName.endsWith('.xls') ||
    fileName.endsWith('.xlsx')
  ) {
    return 'üìä';
  } else if (
    mimeType.includes('application/vnd.ms-powerpoint') ||
    mimeType.includes(
      'application/vnd.openxmlformats-officedocument.presentationml.presentation',
    ) ||
    fileName.endsWith('.ppt') ||
    fileName.endsWith('.pptx')
  ) {
    return 'üìà';
  } else if (mimeType.startsWith('video/')) {
    return 'üé•';
  } else if (mimeType.startsWith('audio/')) {
    return 'üéµ';
  } else if (mimeType.includes('zip') || mimeType.includes('rar') || mimeType.includes('7z')) {
    return 'üì¶';
  } else {
    return 'üìé';
  }
};

// Helper function ƒë·ªÉ ki·ªÉm tra file c√≥ th·ªÉ preview ƒë∆∞·ª£c kh√¥ng
export const canPreview = (mimeType) => {
  if (!mimeType) {
    return false;
  }
  return (
    mimeType.startsWith('image/') ||
    mimeType.includes('pdf') ||
    mimeType.startsWith('text/') ||
    mimeType.startsWith('video/') ||
    mimeType.startsWith('audio/') ||
    mimeType.includes('application/msword') ||
    mimeType.includes('application/vnd.openxmlformats-officedocument.wordprocessingml.document') ||
    mimeType.includes('application/vnd.ms-excel') ||
    mimeType.includes('application/vnd.openxmlformats-officedocument.spreadsheetml.sheet') ||
    mimeType.includes('application/vnd.ms-powerpoint') ||
    mimeType.includes('application/vnd.openxmlformats-officedocument.presentationml.presentation')
  );
};

// Helper function ƒë·ªÉ l·∫•y t√™n lo·∫°i t√†i li·ªáu
export const getTypeName = (type) => {
  const types = {
    enforcement: 'Thi h√†nh √°n',
    court: 'T√≤a √°n',
    notification: 'B√°n n·ª£',
    proactive: 'Ch·ªß ƒë·ªông x·ª≠ l√Ω t√†i s·∫£n',
    collateral: 'T√†i s·∫£n ƒë·∫£m b·∫£o',
    processed_collateral: 'TS ƒë√£ x·ª≠ l√Ω',
    other: 'T√†i li·ªáu kh√°c',
  };
  return types[type] || 'Kh√¥ng x√°c ƒë·ªãnh';
};

// Helper function ƒë·ªÉ t·ªï ch·ª©c files theo lo·∫°i
export const organizeFilesByType = (uploadedFiles) => {
  const fileTypes = [
    'court',
    'enforcement',
    'notification',
    'proactive',
    'collateral',
    'processed_collateral',
    'other',
  ];
  const organizedFiles = {};

  fileTypes.forEach((type) => {
    organizedFiles[type] = uploadedFiles.filter(
      (file) =>
        file.document_type === type ||
        (type === 'other' && (!file.document_type || file.document_type === 'Kh√°c')),
    );
  });

  return organizedFiles;
};
